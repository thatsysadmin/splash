variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

stages:
  - prepare_docker
  - test
  - package

cache:
  paths:
    - ccache/

# 
# Prepare docker images
#
prepare_docker:18.04:
  stage: prepare_docker
  image: docker:stable
  before_script:
    - docker info
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build --pull -t $CI_REGISTRY_IMAGE:ci_18.04 -f $CI_PROJECT_DIR/ci/Dockerfile_18.04 .
    - docker push $CI_REGISTRY_IMAGE:ci_18.04


before_script:
  - apt update -qq
  - DEBIAN_FRONTEND=noninteractive apt install -y ccache wget
  # CCache stuff
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache
  - export PATH="/usr/lib/ccache:${PATH}"
  # Datapath driver download
  - mkdir -p Datapath && cd Datapath
  - wget -q --show-progress http://downloads.datapath.co.uk/Linux/VisionInstall-7.17.14.304.tar.gz
  - tar xvzf VisionInstall-7.17.14.304.tar.gz && cd ..

#
# Tests
#
test:16.04:
  stage: test
  image: ubuntu:16.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends curl build-essential git-core 
      zip cmake automake libtool libxcb-shm0-dev libxrandr-dev libxi-dev libgsl0-dev libatlas3-base libgphoto2-dev
      libxinerama-dev libxcursor-dev python3-dev portaudio19-dev yasm libgl1-mesa-dev python clang
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr -DDATAPATH_SDK_PATH=../Datapath ..
    - make -j$(nproc)
    - make test

test:18.04:
  stage: test
  image: $CI_REGISTRY_IMAGE:ci_18.04
  script: 
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr -DDATAPATH_SDK_PATH=../Datapath ..
    - make -j$(nproc)
    - make test

test:18.04-clang:
  stage: test
  image: $CI_REGISTRY_IMAGE:ci_18.04
  script: 
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - CC=clang CXX=clang++ cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr -DDATAPATH_SDK_PATH=../Datapath ..
    - make -j$(nproc)
    - make test

test:18.04-syslibs:
  stage: test
  image: $CI_REGISTRY_IMAGE:ci_18.04
  script:
    - git submodule update --init
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DUSE_SYSTEM_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr -DDATAPATH_SDK_PATH=../Datapath ..
    - make -j$(nproc)
    - make test

test:archlinux:
  stage: test
  image: base/archlinux
  only:
    - archlinux
  before_script:
    - pacman -Syyu --noconfirm
    - pacman -Sy --noconfirm git cmake make gcc yasm ccache pkgconfig libxi libxinerama libxrandr libxcursor mesa
      gsl libgphoto2 opencv gtk3 hdf5 python3 portaudio zip zlib
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export PATH="/usr/lib/ccache:${PATH}"
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
  script:
    - cmake -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make test

#
# Package
#
package:debian:
  stage: package
  image: $CI_REGISTRY_IMAGE:ci_18.04
  script:
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr -DDATAPATH_SDK_PATH=../Datapath ..
    - make -j$(nproc)
    - make package
    - mv *.deb ../
    - mv addons/blender/*.tar.bz2 ../
  only:
    - tags
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}"
    paths:
      - "*.deb"
      - "*.tar.bz2"

#
# Flatpak
#
package:flatpak:
  stage: package
  image: ubuntu:18.04
  before_script:
    - DEBIAN_FRONTEND=noninteractive apt install -y flatpak-builder
    - flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    - flatpak install flathub org.freedesktop.Platform//1.6 org.freedesktop.Sdk//1.6
  script:
    - flatpak-builder --repo=flatpak_repo build --force-clean data/package/org.splash.Splash.json
    - flatpak build-bundle flatpak_repo splash.flatpak org.splash.Splash
  only:
    - tags
  artifacts:
    name: "splash_flatpak_${CI_BUILD_REF_NAME}"
    paths:
      - "splash.flatpak"
  cache:
    paths:
      - ".flatpak-builder/cache"

#
# Static analysis
#
static_analysis:
  stage: test
  script:
    - wget https://scan.coverity.com/download/linux64 --post-data "token=zkRfEWYxyAeJDlYYg9Hkkg&project=paperManu%2Fsplash"
      -O coverity_tool.tgz
    - tar xvzf coverity_tool.tgz
    - $(ls | grep cov-analysis)/bin/cov-build --dir cov-int make -j$(nproc)
    - tar caf splash-cov.bz2 cov-int
    - curl --form token=zkRfEWYxyAeJDlYYg9Hkkg --form email=emmanueldurand@gmail.com --form file=@splash-cov.bz2
      --form description="Splash" https://scan.coverity.com/builds?project=paperManu%2Fsplash
    - apt install -y libpcre3-dev
    - make static_analysis
    - mv tests/static_analysis_result.txt ../
  only:
    - static_analysis
  artifacts:
    name: "splash_static_analysis_${CI_BUILD_REF_NAME}"
    paths:
    - "static_analysis_result.txt"

