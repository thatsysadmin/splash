variables:
  DOCKER_DRIVER: overlay2

stages:
  - test
  - coverage
  - deploy

cache:
  paths:
    - ccache/

#
# Tests
#

# This is specifically used for Ubuntu builds
before_script:
  - apt update -qq
  - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ca-certificates ccache wget curl build-essential git-core libjsoncpp-dev
    zip cmake automake libtool libxcb-shm0-dev libxrandr-dev libxi-dev libgsl0-dev libatlas3-base libgphoto2-dev 
    libxinerama-dev libxcursor-dev python3-dev portaudio19-dev yasm libgl1-mesa-dev python libopencv-dev
  # CCache stuff
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache
  - export PATH="/usr/lib/ccache:${PATH}"

test:18.04:
  stage: test
  image: ubuntu:18.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends gcc-8 g++-8
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - git submodule update --init
    #
    # Test using bundled libs
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make test
    - ./src/splash ../data/share/splash/splash.json
    - cd ..
    #
    # Test using system libs
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglfw3-dev libglm-dev
      libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libsnappy-dev libzmq3-dev libzmqpp-dev
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DUSE_SYSTEM_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make test
    - ./src/splash ../data/share/splash/splash.json

test:19.10:
  stage: test
  image: ubuntu:19.10
  script: 
    - git submodule update --init
    #
    # Test using bundled libs
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make test
    - ./src/splash ../data/share/splash/splash.json
    - cd ..
    #
    # Test using system libs
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libglfw3-dev libglm-dev
      libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libsnappy-dev libzmq3-dev libzmqpp-dev
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DUSE_SYSTEM_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make test
    - ./src/splash ../data/share/splash/splash.json

test:archlinux:
  stage: test
  image: base/archlinux
  only:
    - archlinux
  before_script:
    - pacman -Syyu --noconfirm
    - pacman -Sy --noconfirm git cmake make gcc yasm ccache pkgconfig libxi libxinerama libxrandr libxcursor mesa
      gsl libgphoto2 opencv gtk3 hdf5 python3 portaudio zip zlib
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export PATH="/usr/lib/ccache:${PATH}"
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
  script:
    - cmake -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make test

#
# Test coverage
#
coverage:
  stage: coverage
  image: ubuntu:19.10
  script: 
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends lcov zip
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DTEST_COVERAGE=ON -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make check_coverage
    - zip -r coverage.zip coverage
    - mv coverage.zip ../
  artifacts:
    name: "splash_coverage_${CI_BUILD_REF_NAME}"
    paths:
    - "coverage.zip"

#
# Package
#
package:debian:
  stage: deploy
  image: ubuntu:18.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends gcc-8 g++-8
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - make -j$(nproc)
    - make package
    - mv *.deb ../
    - mv addons/blender/*.tar.bz2 ../
  only:
    - tags
  artifacts:
    name: "splash_${CI_BUILD_REF_NAME}"
    paths:
      - "*.deb"
      - "*.tar.bz2"

#
# Static analysis
#
static_analysis:
  stage: test
  image: ubuntu:19.10
  script:
    - git submodule update --init
    - ./make_deps.sh
    - rm -rf build && mkdir build && cd build
    - cmake -DBUILD_GENERIC_ARCH=ON -DCMAKE_INSTALL_PREFIX=/usr ..
    - wget https://scan.coverity.com/download/linux64 --post-data "token=zkRfEWYxyAeJDlYYg9Hkkg&project=paperManu%2Fsplash"
      -O coverity_tool.tgz
    - tar xvzf coverity_tool.tgz
    - $(ls | grep cov-analysis)/bin/cov-build --dir cov-int make -j$(nproc)
    - tar caf splash-cov.bz2 cov-int
    - curl --form token=zkRfEWYxyAeJDlYYg9Hkkg --form email=emmanueldurand@gmail.com --form file=@splash-cov.bz2
      --form description="Splash" https://scan.coverity.com/builds?project=paperManu%2Fsplash
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends libpcre3-dev cppcheck
    - make static_analysis
    - mv tests/static_analysis_result.txt ../
  only:
    - static_analysis
  artifacts:
    name: "splash_static_analysis_${CI_BUILD_REF_NAME}"
    paths:
    - "static_analysis_result.txt"

#
# Gitlab pages
#
pages:
  stage: deploy
  image: ubuntu:18.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt install -y python3-pip doxygen graphviz
    - pip3 install mkdocs markdown-include mkdocs-bootswatch
    - git clone https://gitlab.com/sat-metalab/splash.wiki docs/wiki
    - export LC_ALL=C.UTF-8
    - export LANG=C.UTF-8
    - mkdocs build -f docs/mkdocs.yml
    - ./make_deps.sh
    - mkdir build && cd build
    - cmake .. && make doc && cp -r docs/html ../static/doxygen
    - cd ..
    - mv static public
  artifacts:
    paths:
      - public
  only:
    - master
    - website
